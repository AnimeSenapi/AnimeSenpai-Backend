generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "content", "user_data"]
}

model User {
  id                       String           @id @default(cuid())
  email                    String           @unique
  username                 String           @unique
  name                     String?
  avatar                   String?
  bio                      String?
  role                     String           @default("user") // user, tester, admin
  createdAt                DateTime         @default(now())
  updatedAt                DateTime         @updatedAt
  password                 String
  emailVerified            Boolean          @default(false)
  emailVerifiedAt          DateTime?
  emailVerificationToken   String?
  emailVerificationExpires DateTime?
  passwordResetToken       String?
  passwordResetExpires     DateTime?
  twoFactorEnabled         Boolean          @default(false)
  twoFactorSecret          String?
  lastLoginAt              DateTime?
  loginAttempts            Int              @default(0)
  lockedUntil              DateTime?
  gdprConsent              Boolean          @default(false)
  gdprConsentAt            DateTime?
  marketingConsent         Boolean          @default(false)
  marketingConsentAt       DateTime?
  dataProcessingConsent    Boolean          @default(false)
  dataProcessingConsentAt  DateTime?
  followers                Follow[]         @relation("UserFollowers")
  following                Follow[]         @relation("UserFollowing")
  securityEvents           SecurityEvent[]
  preferences              UserPreferences?
  sessions                 UserSession[]
  reviews                  UserAnimeReview[]

  @@index([email])
  @@index([username])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@index([lastLoginAt])
  @@index([createdAt])
  @@index([role])
  @@map("users")
  @@schema("auth")
}

model UserPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("dark")
  language           String   @default("en")
  timezone           String   @default("UTC")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  weeklyDigest       Boolean  @default(true)
  profileVisibility  String   @default("public")
  showWatchHistory   Boolean  @default(true)
  showFavorites      Boolean  @default(true)
  showRatings        Boolean  @default(true)
  autoplay           Boolean  @default(true)
  quality            String   @default("auto")
  subtitles          Boolean  @default(true)
  subtitleLanguage   String   @default("en")
  
  // Recommendation preferences
  onboardingCompleted      Boolean  @default(false)
  favoriteGenres           String[] @default([])
  favoriteTags             String[] @default([])
  discoveryMode            String   @default("balanced") // focused, balanced, exploratory
  useWatchHistory          Boolean  @default(true)
  useRatings               Boolean  @default(true)
  useSearchHistory         Boolean  @default(true)
  useBrowsingPatterns      Boolean  @default(true)
  shareDataForRecommendations Boolean @default(true)
  
  // Social preferences
  showActivityFeed         Boolean  @default(true)
  showFollowersCount       Boolean  @default(true)
  allowFollowers           Boolean  @default(true)
  activityPrivacy          String   @default("friends") // public, friends, private
  notifyOnFollow           Boolean  @default(true)
  notifyOnFriendActivity   Boolean  @default(true)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
  @@schema("auth")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  refreshToken String   @unique
  accessToken  String?
  expiresAt    DateTime
  userAgent    String?
  ipAddress    String?
  deviceInfo   String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([expiresAt])
  @@index([refreshToken])
  @@map("user_sessions")
  @@schema("auth")
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String?
  eventType String
  eventData String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
  @@index([eventType, createdAt])
  @@index([ipAddress, createdAt])
  @@map("security_events")
  @@schema("auth")
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
  @@schema("auth")
}

model ActivityFeed {
  id          String   @id @default(cuid())
  userId      String
  activityType String  // 'rated_anime', 'completed_anime', 'added_to_list', 'started_watching', 'followed_user'
  animeId     String?
  targetUserId String? // For follow activities
  metadata    String?  // JSON for additional data (rating score, etc.)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([activityType, createdAt(sort: Desc)])
  @@index([isPublic, createdAt(sort: Desc)])
  @@map("activity_feed")
  @@schema("user_data")
}

model Notification {
  id            String   @id @default(cuid())
  userId        String   // Who receives the notification
  fromUserId    String?  // Who triggered it
  type          String   // 'new_follower', 'friend_rated', 'friend_completed', 'review_liked'
  animeId       String?
  message       String
  isRead        Boolean  @default(false)
  createdAt     DateTime @default(now())
  
  @@index([userId, isRead, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@map("notifications")
  @@schema("user_data")
}

model FeatureFlag {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., "new-player", "advanced-search"
  name        String   // Display name
  description String?  // What this feature does
  enabled     Boolean  @default(false) // Global feature toggle
  roles       String[] @default([]) // Roles that have access: ["tester", "admin"]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([key])
  @@index([enabled])
  @@map("feature_flags")
  @@schema("auth")
}

model Anime {
  id            String       @id @default(cuid())
  
  // Basic Information
  title         String
  titleEnglish  String?
  titleJapanese String?
  titleSynonyms String[]     @default([])
  slug          String       @unique
  
  // Type & Status
  type          String       // TV, Movie, OVA, Special, ONA, Music
  source        String?      // Manga, Light Novel, Original, etc.
  status        String       // Finished Airing, Currently Airing, Not yet aired
  airing        Boolean      @default(false)
  
  // Episodes & Duration
  episodes      Int?
  duration      String?      // "24 min per ep" from Jikan
  
  // Dates
  aired         String?      // "Apr 3, 2007 to Jun 27, 2007" format
  startDate     DateTime?
  endDate       DateTime?
  season        String?      // winter, spring, summer, fall
  year          Int?
  broadcast     String?      // "Tuesdays at 01:29 (JST)"
  
  // Rating & Classification
  rating        String?      // PG-13, R, G, etc.
  
  // Scores & Rankings
  averageRating Float?       @default(0)
  scoredBy      Int          @default(0)
  rank          Int?         // MyAnimeList rank
  popularity    Int?         // MyAnimeList popularity rank
  members       Int          @default(0) // MAL members count
  favorites     Int          @default(0) // MAL favorites count
  viewCount     Int          @default(0) // AnimeSenpai views
  ratingCount   Int          @default(0) // AnimeSenpai ratings
  
  // Content
  synopsis      String?
  background    String?      // Additional background info from MAL
  
  // Production
  producers     String[]     @default([])
  licensors     String[]     @default([])
  studios       String[]     @default([])
  
  // Classification
  themes        String[]     @default([]) // Themes from MAL
  demographics  String[]     @default([]) // Shounen, Seinen, Josei, Shoujo, Kids
  
  // For recommendations (AnimeSenpai specific)
  tags          String[]     @default([]) // dark, wholesome, action-packed, etc.
  studio        String?      // Deprecated: use studios[] instead
  
  // Media
  coverImage    String?
  bannerImage   String?
  trailer       String?      // YouTube trailer URL
  trailerUrl    String?      // Deprecated: use trailer
  
  // External IDs
  malId         Int?         @unique
  anilistId     Int?         @unique
  kitsuId       Int?         @unique
  
  // Metadata
  approved      Boolean      @default(false) // MAL approval status
  description   String?      // Deprecated: use synopsis
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  genres        AnimeGenre[]
  streamingPlatforms AnimeStreamingPlatform[]
  reviews       UserAnimeReview[]

  @@index([slug])
  @@index([status, type])
  @@index([year, season])
  @@index([viewCount(sort: Desc)])
  @@index([averageRating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([title])
  @@index([titleEnglish])
  @@index([malId])
  @@index([anilistId])
  @@index([rank])
  @@index([popularity])
  @@index([airing])
  @@index([status, averageRating(sort: Desc)])
  @@index([type, averageRating(sort: Desc)])
  @@map("anime")
  @@schema("content")
}

model Genre {
  id          String       @id @default(cuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  anime       AnimeGenre[]

  @@map("genres")
  @@schema("content")
}

model AnimeGenre {
  animeId String
  genreId String
  anime   Anime  @relation(fields: [animeId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([animeId, genreId])
  @@index([genreId, animeId])
  @@map("anime_genres")
  @@schema("content")
}

model StreamingPlatform {
  id          String                   @id @default(cuid())
  name        String                   @unique  // "Crunchyroll", "Netflix", "Hulu", etc.
  slug        String                   @unique  // "crunchyroll", "netflix", "hulu"
  logoUrl     String?                  // Platform logo
  baseUrl     String?                  // "https://www.crunchyroll.com"
  color       String?                  // Brand color for UI
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  anime       AnimeStreamingPlatform[]

  @@map("streaming_platforms")
  @@schema("content")
}

model AnimeStreamingPlatform {
  animeId    String
  platformId String
  url        String                   // Direct URL to anime on platform
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  anime      Anime                    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  platform   StreamingPlatform        @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@id([animeId, platformId])
  @@index([platformId, animeId])
  @@map("anime_streaming_platforms")
  @@schema("content")
}

model UserAnimeList {
  id          String    @id @default(cuid())
  userId      String
  animeId     String
  status      String    // watching, completed, plan-to-watch, on-hold, dropped
  isFavorite  Boolean   @default(false) // Can be favorite AND have a status
  score       Int?
  progress    Int       @default(0)
  notes       String?
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, animeId])
  @@index([userId, status])
  @@index([userId, isFavorite])
  @@index([animeId, userId])
  @@index([userId, updatedAt(sort: Desc)])
  @@index([status, updatedAt(sort: Desc)])
  @@map("user_anime_lists")
  @@schema("user_data")
}

model UserAnimeRating {
  id        String   @id @default(cuid())
  userId    String
  animeId   String
  score     Int
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, animeId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([animeId, score(sort: Desc)])
  @@index([score(sort: Desc), createdAt(sort: Desc)])
  @@map("user_anime_ratings")
  @@schema("user_data")
}

model UserAnimeReview {
  id        String   @id @default(cuid())
  userId    String
  animeId   String
  title     String
  content   String
  score     Int
  isSpoiler Boolean  @default(false)
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [animeId], references: [id], onDelete: Cascade)

  @@unique([userId, animeId])
  @@index([userId, createdAt(sort: Desc)])
  @@index([animeId, isPublic, likes(sort: Desc)])
  @@index([isPublic, createdAt(sort: Desc)])
  @@index([likes(sort: Desc)])
  @@map("user_anime_reviews")
  @@schema("user_data")
}

model RecommendationFeedback {
  id           String   @id @default(cuid())
  userId       String
  animeId      String
  feedbackType String   // 'dismiss', 'hide', 'not_interested_genre'
  reason       String?
  createdAt    DateTime @default(now())
  
  @@unique([userId, animeId])
  @@index([userId])
  @@index([animeId])
  @@index([feedbackType])
  @@map("recommendation_feedback")
  @@schema("user_data")
}

model UserInteraction {
  id         String   @id @default(cuid())
  userId     String
  animeId    String?
  actionType String   // 'view_page', 'search', 'click', 'hover', 'add_to_list'
  metadata   String?  // JSON string for additional data
  duration   Int?     // seconds spent (for views)
  createdAt  DateTime @default(now())
  
  @@index([userId, createdAt(sort: Desc)])
  @@index([animeId])
  @@index([actionType])
  @@map("user_interactions")
  @@schema("user_data")
}

model AnimeEmbedding {
  id               String   @id @default(cuid())
  animeId          String   @unique
  descriptionVector String? // JSON array of floats for description embedding
  genreVector      String?  // JSON array for genre-based embedding
  combinedVector   String?  // Combined embedding for similarity search
  version          String   @default("1.0") // Track embedding version for updates
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@index([animeId])
  @@map("anime_embeddings")
  @@schema("content")
}

model SystemSettings {
  id                        String   @id @default(cuid())
  siteName                  String   @default("AnimeSenpai")
  siteDescription           String   @default("Track, discover, and explore your favorite anime")
  maintenanceMode           Boolean  @default(false)
  maintenanceMessage        String?
  registrationEnabled       Boolean  @default(true)
  emailVerificationRequired Boolean  @default(true)
  maxUploadSize             Int      @default(5242880) // 5MB in bytes
  rateLimit                 Int      @default(100) // requests per minute
  sessionTimeout            Int      @default(86400) // 24 hours in seconds
  enableRecommendations     Boolean  @default(true)
  enableSocialFeatures      Boolean  @default(true)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  
  @@map("system_settings")
  @@schema("auth")
}
